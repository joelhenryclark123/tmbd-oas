=begin
#TMDB API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Favorite Movies
    # Get a user's list of favourite movies.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [AccountFavoriteMovies200Response]
    def account_favorite_movies(account_object_id, opts = {})
      data, _status_code, _headers = account_favorite_movies_with_http_info(account_object_id, opts)
      data
    end

    # Favorite Movies
    # Get a user&#39;s list of favourite movies.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [Array<(AccountFavoriteMovies200Response, Integer, Hash)>] AccountFavoriteMovies200Response data, response status code and response headers
    def account_favorite_movies_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_favorite_movies ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_favorite_movies"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/movie/favorites'.sub('{' + 'account_object_id' + '}', CGI.escape(account_object_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountFavoriteMovies200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.account_favorite_movies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_favorite_movies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Favorite TV Shows
    # Get a user's list of favourite TV shows.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [AccountFavoriteTv200Response]
    def account_favorite_tv(account_object_id, opts = {})
      data, _status_code, _headers = account_favorite_tv_with_http_info(account_object_id, opts)
      data
    end

    # Favorite TV Shows
    # Get a user&#39;s list of favourite TV shows.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [Array<(AccountFavoriteTv200Response, Integer, Hash)>] AccountFavoriteTv200Response data, response status code and response headers
    def account_favorite_tv_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_favorite_tv ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_favorite_tv"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/tv/favorites'.sub('{' + 'account_object_id' + '}', CGI.escape(account_object_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountFavoriteTv200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.account_favorite_tv",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_favorite_tv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists
    # Get all of the lists you've created.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @return [AccountLists200Response]
    def account_lists(account_object_id, opts = {})
      data, _status_code, _headers = account_lists_with_http_info(account_object_id, opts)
      data
    end

    # Lists
    # Get all of the lists you&#39;ve created.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @return [Array<(AccountLists200Response, Integer, Hash)>] AccountLists200Response data, response status code and response headers
    def account_lists_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_lists ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_lists"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/lists'.sub('{' + 'account_object_id' + '}', CGI.escape(account_object_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountLists200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.account_lists",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recommended Movies
    # Get a user's list of recommended movies.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [AccountMovieRecommendations200Response]
    def account_movie_recommendations(account_object_id, opts = {})
      data, _status_code, _headers = account_movie_recommendations_with_http_info(account_object_id, opts)
      data
    end

    # Recommended Movies
    # Get a user&#39;s list of recommended movies.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [Array<(AccountMovieRecommendations200Response, Integer, Hash)>] AccountMovieRecommendations200Response data, response status code and response headers
    def account_movie_recommendations_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_movie_recommendations ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_movie_recommendations"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/movie/recommendations'.sub('{' + 'account_object_id' + '}', CGI.escape(account_object_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountMovieRecommendations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.account_movie_recommendations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_movie_recommendations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Watchlist Movies
    # Get a user's movie watchlist.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [AccountMovieRecommendations200Response]
    def account_movie_watchlist(account_object_id, opts = {})
      data, _status_code, _headers = account_movie_watchlist_with_http_info(account_object_id, opts)
      data
    end

    # Watchlist Movies
    # Get a user&#39;s movie watchlist.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [Array<(AccountMovieRecommendations200Response, Integer, Hash)>] AccountMovieRecommendations200Response data, response status code and response headers
    def account_movie_watchlist_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_movie_watchlist ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_movie_watchlist"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/movie/watchlist'.sub('{' + 'account_object_id' + '}', CGI.escape(account_object_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountMovieRecommendations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.account_movie_watchlist",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_movie_watchlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rated Movies
    # Get a user's rated movies.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [AccountRatedMovies200Response]
    def account_rated_movies(account_object_id, opts = {})
      data, _status_code, _headers = account_rated_movies_with_http_info(account_object_id, opts)
      data
    end

    # Rated Movies
    # Get a user&#39;s rated movies.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [Array<(AccountRatedMovies200Response, Integer, Hash)>] AccountRatedMovies200Response data, response status code and response headers
    def account_rated_movies_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_rated_movies ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_rated_movies"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/movie/rated'.sub('{' + 'account_object_id' + '}', CGI.escape(account_object_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountRatedMovies200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.account_rated_movies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_rated_movies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rated TV Shows
    # Get a user's rated TV shows.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [AccountRatedTv200Response]
    def account_rated_tv(account_object_id, opts = {})
      data, _status_code, _headers = account_rated_tv_with_http_info(account_object_id, opts)
      data
    end

    # Rated TV Shows
    # Get a user&#39;s rated TV shows.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [Array<(AccountRatedTv200Response, Integer, Hash)>] AccountRatedTv200Response data, response status code and response headers
    def account_rated_tv_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_rated_tv ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_rated_tv"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/tv/rated'.sub('{' + 'account_object_id' + '}', CGI.escape(account_object_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountRatedTv200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.account_rated_tv",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_rated_tv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recommended TV Shows
    # Get a user's list of recommended TV shows.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [AccountTvRecommendations200Response]
    def account_tv_recommendations(account_object_id, opts = {})
      data, _status_code, _headers = account_tv_recommendations_with_http_info(account_object_id, opts)
      data
    end

    # Recommended TV Shows
    # Get a user&#39;s list of recommended TV shows.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [Array<(AccountTvRecommendations200Response, Integer, Hash)>] AccountTvRecommendations200Response data, response status code and response headers
    def account_tv_recommendations_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_tv_recommendations ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_tv_recommendations"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/tv/recommendations'.sub('{' + 'account_object_id' + '}', CGI.escape(account_object_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountTvRecommendations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.account_tv_recommendations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_tv_recommendations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Watchlist TV Shows
    # Get a user's TV watchlist.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [AccountTvRecommendations200Response]
    def account_tv_watchlist(account_object_id, opts = {})
      data, _status_code, _headers = account_tv_watchlist_with_http_info(account_object_id, opts)
      data
    end

    # Watchlist TV Shows
    # Get a user&#39;s TV watchlist.
    # @param account_object_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [String] :language  (default to 'en-US')
    # @return [Array<(AccountTvRecommendations200Response, Integer, Hash)>] AccountTvRecommendations200Response data, response status code and response headers
    def account_tv_watchlist_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_tv_watchlist ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_tv_watchlist"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/tv/watchlist'.sub('{' + 'account_object_id' + '}', CGI.escape(account_object_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountTvRecommendations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.account_tv_watchlist",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_tv_watchlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Access Token
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [AuthCreateRequestTokenRequest] :auth_create_request_token_request 
    # @return [AuthCreateAccessToken200Response]
    def auth_create_access_token(opts = {})
      data, _status_code, _headers = auth_create_access_token_with_http_info(opts)
      data
    end

    # Create Access Token
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [AuthCreateRequestTokenRequest] :auth_create_request_token_request 
    # @return [Array<(AuthCreateAccessToken200Response, Integer, Hash)>] AuthCreateAccessToken200Response data, response status code and response headers
    def auth_create_access_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.auth_create_access_token ...'
      end
      # resource path
      local_var_path = '/4/auth/access_token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'auth_create_request_token_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AuthCreateAccessToken200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.auth_create_access_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#auth_create_access_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Request Token
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [AuthCreateRequestTokenRequest] :auth_create_request_token_request 
    # @return [AuthCreateRequestToken200Response]
    def auth_create_request_token(opts = {})
      data, _status_code, _headers = auth_create_request_token_with_http_info(opts)
      data
    end

    # Create Request Token
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [AuthCreateRequestTokenRequest] :auth_create_request_token_request 
    # @return [Array<(AuthCreateRequestToken200Response, Integer, Hash)>] AuthCreateRequestToken200Response data, response status code and response headers
    def auth_create_request_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.auth_create_request_token ...'
      end
      # resource path
      local_var_path = '/4/auth/request_token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'auth_create_request_token_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AuthCreateRequestToken200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.auth_create_request_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#auth_create_request_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Logout
    # Log out of a session.
    # @param [Hash] opts the optional parameters
    # @option opts [AuthCreateRequestTokenRequest] :auth_create_request_token_request 
    # @return [AuthLogout200Response]
    def auth_logout(opts = {})
      data, _status_code, _headers = auth_logout_with_http_info(opts)
      data
    end

    # Logout
    # Log out of a session.
    # @param [Hash] opts the optional parameters
    # @option opts [AuthCreateRequestTokenRequest] :auth_create_request_token_request 
    # @return [Array<(AuthLogout200Response, Integer, Hash)>] AuthLogout200Response data, response status code and response headers
    def auth_logout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.auth_logout ...'
      end
      # resource path
      local_var_path = '/4/auth/access_token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'auth_create_request_token_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AuthLogout200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.auth_logout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#auth_logout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear
    # Clear all of the items on a list.
    # @param list_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [ListClear200Response]
    def list_clear(list_id, opts = {})
      data, _status_code, _headers = list_clear_with_http_info(list_id, opts)
      data
    end

    # Clear
    # Clear all of the items on a list.
    # @param list_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListClear200Response, Integer, Hash)>] ListClear200Response data, response status code and response headers
    def list_clear_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_clear ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_clear"
      end
      # resource path
      local_var_path = '/4/list/{list_id}/clear'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListClear200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_clear",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_clear\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create
    # Create a new list.
    # @param [Hash] opts the optional parameters
    # @option opts [AuthCreateRequestTokenRequest] :auth_create_request_token_request 
    # @return [ListCreate200Response]
    def list_create(opts = {})
      data, _status_code, _headers = list_create_with_http_info(opts)
      data
    end

    # Create
    # Create a new list.
    # @param [Hash] opts the optional parameters
    # @option opts [AuthCreateRequestTokenRequest] :auth_create_request_token_request 
    # @return [Array<(ListCreate200Response, Integer, Hash)>] ListCreate200Response data, response status code and response headers
    def list_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_create ...'
      end
      # resource path
      local_var_path = '/4/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'auth_create_request_token_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ListCreate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete
    # Delete a list.
    # @param list_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [AuthLogout200Response]
    def list_delete(list_id, opts = {})
      data, _status_code, _headers = list_delete_with_http_info(list_id, opts)
      data
    end

    # Delete
    # Delete a list.
    # @param list_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthLogout200Response, Integer, Hash)>] AuthLogout200Response data, response status code and response headers
    def list_delete_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_delete ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_delete"
      end
      # resource path
      local_var_path = '/4/{list_id}'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthLogout200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Item Status
    # Check if an item is on a list.
    # @param list_id [Integer] 
    # @param media_id [Integer] 
    # @param media_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [ListItemStatus200Response]
    def list_item_status(list_id, media_id, media_type, opts = {})
      data, _status_code, _headers = list_item_status_with_http_info(list_id, media_id, media_type, opts)
      data
    end

    # Item Status
    # Check if an item is on a list.
    # @param list_id [Integer] 
    # @param media_id [Integer] 
    # @param media_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListItemStatus200Response, Integer, Hash)>] ListItemStatus200Response data, response status code and response headers
    def list_item_status_with_http_info(list_id, media_id, media_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_item_status ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_item_status"
      end
      # verify the required parameter 'media_id' is set
      if @api_client.config.client_side_validation && media_id.nil?
        fail ArgumentError, "Missing the required parameter 'media_id' when calling DefaultApi.list_item_status"
      end
      # verify the required parameter 'media_type' is set
      if @api_client.config.client_side_validation && media_type.nil?
        fail ArgumentError, "Missing the required parameter 'media_type' when calling DefaultApi.list_item_status"
      end
      # verify enum value
      allowable_values = ["", "movie", "tv"]
      if @api_client.config.client_side_validation && !allowable_values.include?(media_type)
        fail ArgumentError, "invalid value for \"media_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/4/list/{list_id}/item_status'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'media_id'] = media_id
      query_params[:'media_type'] = media_type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListItemStatus200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_item_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_item_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
